{"version":3,"sources":["containers/Day.js","containers/Night.js","containers/Dead.js","containers/Start.js","containers/App.js","serviceWorker.js","index.js","assets/logo.svg","assets/moon.svg","assets/audio.mp3","assets/death.mp3","assets/repairing-service.svg"],"names":["Day","props","toggleSidebar","event","a","key","currentTarget","parentNode","id","setState","state","rightOpen","axios","post","res","bindData","data","myToggle","handleChange","name","target","checked","filpButton","career","flipCard","then","catch","error","getResult","swal","text","icon","buttons","closeOnClickOutside","setTimeout","liveAll","playAudio","msg","pauseAudio","err","audio","document","querySelector","currentTime","src","children","play","pause","requestDead","dangerMode","willDelete","str","history","push","pathname","close","getDate","today","Date","mm","getMonth","yyyy","getFullYear","date","location","Name","flipped","people","this","arr","obj","BootstrapButton","withStyles","root","margin","boxShadow","textTransform","fontSize","padding","border","lineHeight","backgroundColor","borderColor","fontFamily","join","Button","useStyles","makeStyles","theme","width","maxWidth","palette","background","paper","buttonStyles","spacing","audioFile","type","audioDeath","className","alt","bank","model","number","brand","cvv","holderName","expiration","Switch","onChange","value","color","inputProps","variant","onClick","nightLogo","List","component","aria-label","map","con","i","ListItem","button","Target","status","ListItemIcon","ListItemText","primary","React","Component","Car","TestAlert","makeAlert","result","alert","App","logo","href","rel","Start","SetGame","parseInt","allNum","mafiaNum","docNum","polNum","title","cancel","e","Number","readyToStart","content","Career","State","response","ResetGame","leftOpen","classes","optionLogo","noValidate","autoComplete","TextField","label","fullWidth","exact","path","Night","Dead","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.6fb9cfc7.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../assets/logo.svg';\r\nimport '../assets/App.css';\r\nimport swal from \"sweetalert\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport PaymentCard from 'react-payment-card-component'\r\nimport axios from 'axios'\r\nimport Button from '@material-ui/core/Button';\r\nimport '../assets/start.scss'\r\nimport nightLogo from '../assets/moon.svg'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport audioFile from '../assets/audio.mp3'\r\nimport audioDeath from '../assets/death.mp3'\r\n\r\nclass Day extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            name: this.props.location.state.Name,\r\n            career: \"배정중..\",\r\n            filpButton: false,\r\n            flipped: false,\r\n            date: \"\",\r\n            rightOpen: false,\r\n            people: []\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDate();\r\n    }\r\n\r\n    toggleSidebar = async (event) => {\r\n        let key = `${event.currentTarget.parentNode.id}Open`;\r\n        this.setState({ [key]: !this.state[key] })\r\n\r\n        /* 생존자 리스트 불러오기 */\r\n        if (!this.state.rightOpen) {\r\n            let res = await axios.post('/day/load');\r\n            await this.bindData(res.data);\r\n        }\r\n    }\r\n\r\n    myToggle = () => {\r\n        this.setState({\r\n            rightOpen: !this.state.rightOpen\r\n        })\r\n    }\r\n\r\n\r\n    async bindData(data) {\r\n        let arr = []\r\n        for (let obj of data) {\r\n            arr.push(obj);\r\n        }\r\n\r\n        this.setState({\r\n            people: arr\r\n        })\r\n    }\r\n\r\n    handleChange = name => event => {\r\n        this.setState({ ...this.state, [name]: event.target.checked });\r\n        if (!this.state.filpButton && this.state.career === \"배정중..\") {\r\n            axios.post('/day/check', {\r\n                name: this.state.name,\r\n                career: this.state.career,\r\n                state: 'O'\r\n            }).then(res => {\r\n                this.setState({ career: res.data });\r\n                this.flipCard();\r\n            }).catch((error) => {\r\n                this.flipCard();\r\n            })\r\n        }\r\n        else\r\n            this.flipCard()\r\n    }\r\n\r\n    flipCard() {\r\n        const flipped = !this.state.flipped\r\n        this.setState({ flipped })\r\n    }\r\n\r\n    getResult = () => {\r\n        swal({\r\n            text: \"결과 요청중...\",\r\n            icon: \"warning\",\r\n            buttons: false,\r\n            closeOnClickOutside: false\r\n        })\r\n\r\n        setTimeout(() => {\r\n            axios.post('/night/checkRes', {\r\n                name: this.state.name,\r\n                career: this.state.career,\r\n            })\r\n                .then(res => {\r\n                    //alert(JSON.stringify(res))\r\n                    if (res.data.liveAll) {\r\n                        this.playAudio();\r\n                    }\r\n                    swal({\r\n                        text: res.data.msg\r\n                    }).then(() => {\r\n                        this.pauseAudio();\r\n                    })\r\n                }).catch((err) => {\r\n                    swal({\r\n                        text: \"재요청바람\",\r\n                        icon: \"error\"\r\n                    })\r\n                })\r\n        }, 800)\r\n    }\r\n\r\n    playAudio = () => {\r\n        let audio = document.querySelector(\"audio\");\r\n        audio.currentTime = 0;\r\n        audio.src = audio.children[0].src;\r\n        audio.play();\r\n\r\n        // setTimeout(() => {\r\n        //     audio.pause();\r\n        // }, 5000);\r\n    }\r\n\r\n    pauseAudio = () => {\r\n        let audio = document.querySelector(\"audio\");\r\n        audio.pause();\r\n    }\r\n\r\n    requestDead = () => {\r\n        swal({\r\n            text: \"실수아니지?\",\r\n            buttons: true,\r\n            dangerMode: true\r\n        }).then((willDelete) => {\r\n            if (willDelete) {\r\n                swal({\r\n                    text: \"처리중..\",\r\n                    icon: \"warning\",\r\n                    buttons: false,\r\n                    closeOnClickOutside: false\r\n                })\r\n\r\n                setTimeout(() => {\r\n                    axios.post('/night/deadRequest', {\r\n                        name: this.state.name,\r\n                        state: \"O\"\r\n                    })\r\n                        .then(res => {\r\n\r\n                            let audio = document.querySelector(\"audio\");\r\n                            audio.currentTime = 0;\r\n                            audio.src = audio.children[1].src;\r\n                            audio.play(); \r\n\r\n                            var str = \"\";\r\n                            if (res.data == \"X\") {\r\n                                str = \"잘가~\"\r\n                            } else {\r\n                                str = \"Error\"\r\n                            }\r\n                            swal({\r\n                                text: str,\r\n                                closeOnClickOutside: false,\r\n                                buttons: false\r\n                            })\r\n\r\n                            setTimeout(() => {\r\n                                this.props.history.push({\r\n                                    pathname: '/'\r\n                                });\r\n                                swal.close();\r\n                            }, 2200)                            \r\n                     \r\n                        }).catch((err) => {\r\n                            swal({\r\n                                text: \"재요청바람\",\r\n                                icon: \"error\"\r\n                            })\r\n                        })\r\n                }, 800)\r\n            } else {\r\n                swal({\r\n                    text: \"콱씨마!\",\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    getDate = () => {\r\n        var today = new Date();\r\n        var mm = today.getMonth() + 1;\r\n        var yyyy = today.getFullYear();\r\n\r\n        if (mm < 10) {\r\n            mm = '0' + mm;\r\n        }\r\n\r\n        today = mm + '/' + yyyy\r\n\r\n        this.setState({ date: today });\r\n    }\r\n\r\n    render() {\r\n        const BootstrapButton = withStyles({\r\n            root: {\r\n                margin: '10px',\r\n                boxShadow: 'none',\r\n                textTransform: 'none',\r\n                fontSize: 16,\r\n                padding: '6px 12px',\r\n                border: '1px solid', \r\n                lineHeight: 1.5,\r\n                backgroundColor: '#000000',\r\n                borderColor: '#000000',\r\n                fontFamily: [\r\n                    '-apple-system',\r\n                    'BlinkMacSystemFont',\r\n                    '\"Segoe UI\"',\r\n                    'Roboto',\r\n                    '\"Helvetica Neue\"',\r\n                    'Arial',\r\n                    'sans-serif',\r\n                    '\"Apple Color Emoji\"',\r\n                    '\"Segoe UI Emoji\"',\r\n                    '\"Segoe UI Symbol\"',\r\n                ].join(','),\r\n                '&:hover': {\r\n                    backgroundColor: '#0069d9',\r\n                    borderColor: '#0062cc',\r\n                    boxShadow: 'none',\r\n                },\r\n                '&:active': {\r\n                    boxShadow: 'none',\r\n                    backgroundColor: '#0062cc',\r\n                    borderColor: '#005cbf',\r\n                },\r\n                '&:focus': {\r\n                    boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\r\n                },\r\n            },\r\n        })(Button);\r\n\r\n        let rightOpen = this.state.rightOpen ? 'open' : 'closed';\r\n\r\n        const useStyles = makeStyles(theme => ({\r\n            root: {\r\n                width: '100%',\r\n                maxWidth: 360,\r\n                backgroundColor: theme.palette.background.paper,\r\n            },\r\n        }));\r\n\r\n        const buttonStyles = makeStyles(theme => ({\r\n            root: {\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                },\r\n            },\r\n        }));\r\n\r\n        return (\r\n            <div id='layout'>\r\n                <audio id=\"myAudio\">\r\n                    <source src={audioFile} type=\"audio/mpeg\" />\r\n                    <source src={audioDeath} type=\"audio/mpeg\" />\r\n                </audio>\r\n                <div id='main'>\r\n                    <div className=\"App\">\r\n                        <header className=\"App-header\">\r\n                            <img src=\"https://upload.wikimedia.org/wikipedia/commons/4/45/Logo_Mafia.svg\" className=\"App-logo-Day\" alt=\"logo\" />\r\n                            <p>\r\n                            </p>\r\n                            <PaymentCard\r\n                                bank=\"santander\"\r\n                                model=\"normal\"\r\n                                type=\"black\"\r\n                                number=\"WELCOME_TO_MAFIA\"\r\n                                brand=\"mastercard\"\r\n                                cvv={this.state.career}\r\n                                holderName={this.state.name}\r\n                                expiration={this.state.date}\r\n                                flipped={this.state.flipped}\r\n                            />\r\n                            <Switch\r\n                                onChange={this.handleChange('filpButton')}\r\n                                value=\"night\"\r\n                                color=\"default\"\r\n                                inputProps={{ 'aria-label': 'Night Switch' }}\r\n                            />\r\n                            <p></p>\r\n                            <div className={buttonStyles.root}>\r\n                                <BootstrapButton variant=\"contained\" color=\"primary\" onClick={this.getResult}>RESULT</BootstrapButton>\r\n                                <BootstrapButton variant=\"contained\" color=\"secondary\" onClick={this.requestDead}>DEAD</BootstrapButton>\r\n                            </div>\r\n\r\n                        </header>\r\n                    </div>\r\n                </div>\r\n                <div id='right' className={rightOpen} >\r\n                    <div className='icon'\r\n                        onClick={this.toggleSidebar} >\r\n                        <img src={nightLogo} className=\"Option-logo\" alt=\"option\" />\r\n                    </div>\r\n                    <div className={`sidebar ${rightOpen}`} >\r\n                        <div className='header'>\r\n                            <h3 className='title'>\r\n                                Night\r\n                                </h3>\r\n                        </div>\r\n                        <div className='content'>\r\n                            <div className={useStyles.root}>\r\n                                {/* <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                    {this.state.people.map((con, i) => {\r\n                                        return (<ListItem\r\n                                            button\r\n                                            onClick={this.handleListItemClick(i)}\r\n                                        >\r\n                                            <ListItemIcon>\r\n                                                <DraftsIcon />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary={con.name} />\r\n                                        </ListItem>);\r\n                                    })}\r\n                                </List> */}\r\n                                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                                    {this.state.people.map((con, i) => {\r\n                                        return (\r\n                                            <ListItem\r\n                                                button\r\n                                                onClick={() => {\r\n                                                    if (this.state.career !== \"배정중..\") {\r\n                                                        if (con.name !== this.state.name\r\n                                                            || (this.state.career === \"시민\" || this.state.career === \"의사\")) {\r\n                                                            swal({\r\n                                                                text: con.name + \"이(가) 확실해?\",\r\n                                                                buttons: true,\r\n                                                                dangerMode: true\r\n                                                            }).then((willDelete) => {\r\n                                                                if (willDelete) {\r\n                                                                    swal({\r\n                                                                        text: \"처리중...\",\r\n                                                                        icon: \"warning\",\r\n                                                                        buttons: false,\r\n                                                                        closeOnClickOutside: false\r\n                                                                    })\r\n\r\n                                                                    axios.post(\"/night/setTarget\", {\r\n                                                                        name: this.state.name,\r\n                                                                        career: this.state.career,\r\n                                                                        state: 'O',\r\n                                                                        Target: `${con.name}`\r\n                                                                    }).then((res) => {\r\n\r\n                                                                        if (res.status === 200) {\r\n                                                                            setTimeout(() => {\r\n                                                                                swal({\r\n                                                                                    text: \"처리 완료\",\r\n                                                                                    icon: \"success\",\r\n                                                                                    buttons: false,\r\n                                                                                    closeOnClickOutside: false\r\n                                                                                });\r\n\r\n                                                                            }, 700);\r\n                                                                        } else if (res.status === 201) {\r\n                                                                            setTimeout(() => {\r\n                                                                                swal({\r\n                                                                                    text: \"중복 요청 ㅡㅡ*\",\r\n                                                                                    icon: \"error\",\r\n                                                                                    buttons: false,\r\n                                                                                    closeOnClickOutside: false\r\n                                                                                });\r\n                                                                            }, 700);\r\n                                                                        } else if (res.status === 202) {\r\n                                                                            setTimeout(() => {\r\n                                                                                swal({\r\n                                                                                    text: \"목록 초기화 해라 ㅡㅡ*\",\r\n                                                                                    icon: \"error\",\r\n                                                                                    buttons: false,\r\n                                                                                    closeOnClickOutside: false\r\n                                                                                });\r\n                                                                            }, 700);\r\n                                                                        }\r\n                                                                    }).catch((error) => {\r\n                                                                        setTimeout(() => {\r\n                                                                            swal({\r\n                                                                                text: \"재요청바람\",\r\n                                                                                icon: \"error\",\r\n                                                                                buttons: false,\r\n                                                                                closeOnClickOutside: false\r\n                                                                            });\r\n                                                                        }, 700);\r\n                                                                    });\r\n\r\n                                                                    setTimeout(() => {\r\n                                                                        swal.close();\r\n                                                                        this.myToggle();\r\n                                                                    }, 1800);\r\n                                                                }\r\n                                                                else {\r\n                                                                    swal({\r\n                                                                        text: \"콱씨마!\",\r\n                                                                    })\r\n                                                                }\r\n                                                            })\r\n                                                        }\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                <ListItemIcon>\r\n                                                    <DraftsIcon />\r\n                                                </ListItemIcon>\r\n                                                <ListItemText primary={con.name}></ListItemText>\r\n                                            </ListItem>);\r\n                                    })}\r\n                                </List>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\n\r\n\r\n\r\nclass MyList extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = ({\r\n            selectedIndex: \"\",\r\n        });\r\n    }\r\n\r\n\r\n    handleListItemClick(e, i) {\r\n        this.setState({ selectedIndex: i })\r\n        // alert(i +\" picked!\");\r\n    }\r\n\r\n    render() {\r\n        const useStyles = makeStyles(theme => ({\r\n            root: {\r\n                width: '100%',\r\n                maxWidth: 360,\r\n                backgroundColor: theme.palette.background.paper,\r\n            },\r\n        }));\r\n\r\n        return (\r\n            <div className={useStyles.root}>\r\n                <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n                    <ListItem\r\n                        button\r\n                        onClick={event => this.handleListItemClick(event, 0)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <InboxIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Inbox\" />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={event => this.handleListItemClick(event, 1)}\r\n                    >\r\n                        <ListItemIcon>\r\n                            <DraftsIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Drafts\" />\r\n                    </ListItem>\r\n                </List>\r\n                <Divider />\r\n                <List component=\"nav\" aria-label=\"secondary mailbox folder\">\r\n                    <ListItem\r\n                        button\r\n                        onClick={event => this.handleListItemClick(event, 2)}\r\n                    >\r\n                        <ListItemText primary=\"Trash\" />\r\n                    </ListItem>\r\n                    <ListItem\r\n                        button\r\n                        onClick={event => this.handleListItemClick(event, 3)}\r\n                    >\r\n                        <ListItemText primary=\"Spam\" />\r\n                    </ListItem>\r\n                </List>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default Day;","import React from 'react';\r\nimport logo from '../assets/logo.svg';\r\nimport '../assets/App.css';\r\nimport swal from \"sweetalert\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n          <Car />\r\n        </a>\r\n        <TestAlert />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Car() {\r\n  return (\r\n    <h1>N</h1>\r\n  );\r\n}\r\n\r\nclass TestAlert extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { msg : \"Mafia\"}\r\n  }\r\n\r\n  makeAlert = async () => {\r\n    let result = await swal(\"Night\")\r\n    alert(result);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button type = \"button\" onClick={this.makeAlert}>Check Career</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport logo from '../assets/logo.svg';\r\nimport '../assets/App.css';\r\nimport swal from \"sweetalert\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n          <Car />\r\n        </a>\r\n        <TestAlert />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Car() {\r\n  return (\r\n    <h1>Dead</h1>\r\n  );\r\n}\r\n\r\nclass TestAlert extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { msg : \"Mafia\"}\r\n  }\r\n\r\n  makeAlert = async () => {\r\n    let result = await swal(\"Dead\")\r\n    alert(result);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button type = \"button\" onClick={this.makeAlert}>Check Career</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport optionLogo from '../assets/repairing-service.svg'\r\nimport '../assets/App.css';\r\nimport swal from \"sweetalert\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport axios from 'axios'\r\nimport '../assets/start.scss'\r\n\r\n\r\nclass Start extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            allNum: 11,\r\n            mafiaNum: 3,\r\n            docNum: 1,\r\n            polNum: 2,\r\n            leftOpen: false,\r\n            rightOpen: false\r\n        }\r\n        //setTimeout(() => { props.history.push(\"/day\"); }, 1000);\r\n    }\r\n\r\n    SetGame = () => {\r\n        if (parseInt(this.state.allNum) <= parseInt(this.state.mafiaNum) + parseInt(this.state.docNum) + parseInt(this.state.polNum)\r\n            || parseInt(this.state.mafiaNum) === 0) {\r\n            swal(\"인원수 및 마피수 체크\")\r\n        }\r\n        else {\r\n            swal({\r\n                text: \"요청 중...\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                closeOnClickOutside: false\r\n            })\r\n            axios.post('/start/setNum', {\r\n                allNum: parseInt(this.state.allNum),\r\n                mafiaNum: parseInt(this.state.mafiaNum),\r\n                docNum: parseInt(this.state.docNum),\r\n                polNum: parseInt(this.state.polNum),\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    if(res.data === \"success\") {\r\n                        setTimeout(() => {\r\n                            swal({\r\n                                text: \"셋팅 완료\",\r\n                                icon: \"success\",\r\n                                buttons: false,\r\n                                closeOnClickOutside: false\r\n                            });\r\n                        }, 700);\r\n    \r\n                        setTimeout(() => {\r\n                            swal.close();\r\n                        }, 1800);\r\n                    } else {\r\n                        setTimeout(() => {\r\n                            swal({\r\n                                text: \"게임중\",\r\n                                icon: \"error\",\r\n                                buttons: false,\r\n                                closeOnClickOutside: false\r\n                            });\r\n                        }, 700);\r\n    \r\n                        setTimeout(() => {\r\n                            swal.close();\r\n                        }, 1800);\r\n                    }\r\n                }\r\n            }).catch(error => {\r\n                swal({\r\n                    title: \"셋팅 실패\",\r\n                    icon: \"error\",\r\n                    button: {\r\n                        cancel: \"Close\"\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let value = e.target.value;\r\n        if (value === \"\"  || value === \"0\" || Number(value)) {\r\n            this.setState({\r\n                [e.target.name] : value,\r\n            });\r\n        }\r\n    }\r\n    \r\n\r\n    toggleSidebar = (event) => {\r\n        let key = `${event.currentTarget.parentNode.id}Open`;\r\n        this.setState({ [key]: !this.state[key] })\r\n    }\r\n\r\n\r\n    readyToStart = async () => {\r\n        swal({\r\n            text: '이름 입력',\r\n            content: \"input\",\r\n        }).then((name) => {\r\n\r\n            swal({\r\n                text: \"요청 중...\",\r\n                icon: \"warning\",\r\n                buttons: false,\r\n                closeOnClickOutside: false\r\n            })\r\n\r\n            /* 디버깅용 redirect */\r\n            // this.props.history.push({\r\n            //     pathname: '/day',\r\n            //     state: { Name: `${name}` }\r\n            // });\r\n\r\n\r\n            axios.post('/start/ready', {\r\n                Name: `${name}`,\r\n                Career: \"시민\",\r\n                State: 'O'\r\n            })\r\n                .then(res => {\r\n                    var str = \"\";\r\n                    if (res.status === 200) {\r\n                        str = \"참가완료\"\r\n                    } else if (res.status === 201) {\r\n                        str = \"재진입\"\r\n                    }\r\n\r\n                    swal({\r\n                        text: `${str}`,\r\n                        icon: \"success\",\r\n                        buttons: false,\r\n                        closeOnClickOutside: false\r\n                    })\r\n\r\n                    setTimeout(() => {\r\n                        swal.close()\r\n                        this.props.history.push({\r\n                            pathname: '/day',\r\n                            state: { Name: `${name}` }\r\n                        });\r\n                    }, 1400);\r\n                })\r\n                .catch((error) =>{\r\n                    var str = \"default\";\r\n                    if(error.response.status == 400) {\r\n                        str = \"이름 똑바로 입력해라\";\r\n                    } else if(error.response.status == 401) {\r\n                        str = \"게임 중\"\r\n                    }\r\n                    swal({\r\n                        text: str,\r\n                        icon: \"error\",\r\n                        button: {\r\n                            cancel: \"close\"\r\n                        }\r\n                    });\r\n                });\r\n        });\r\n    }\r\n\r\n    ResetGame = () => {\r\n        swal({\r\n            title: \"실수아니지?\",\r\n            text: \"엄근진 ㅡㅡ*\",\r\n            buttons: true,\r\n            dangerMode: true\r\n        }).then((willDelete)=> {\r\n            if(willDelete) {\r\n                swal({\r\n                    text: \"리셋 중...\",\r\n                    icon: \"warning\",\r\n                    buttons: false\r\n                })\r\n        \r\n                axios.post('/start/reset')\r\n                    .then(res => {\r\n                        if (res.status === 200) {\r\n                            if(res.data === \"success\") {\r\n                                setTimeout(() => {\r\n                                    swal({\r\n                                        text: \"리셋 완료\",\r\n                                        icon: \"success\",\r\n                                    });\r\n                                }, 1000);\r\n                            } else {\r\n                                setTimeout(() => {\r\n                                    swal({\r\n                                        text: \"게임중\",\r\n                                        icon: \"error\",\r\n                                    });\r\n                                }, 1000);\r\n                            }\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        swal({\r\n                            text: \"요청 실패\",\r\n                            icon: \"error\",\r\n                            button: {\r\n                                cancel: \"Close\"\r\n                            }\r\n                        });\r\n                    });\r\n            } else {\r\n                swal({\r\n                    title: \"콱씨마! ㅡㅡ*\",\r\n                    icon: \"error\"\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        let leftOpen = this.state.leftOpen ? 'open' : 'closed';\r\n\r\n        const classes = makeStyles(theme => ({\r\n            root: {\r\n                '& > *': {\r\n                    margin: theme.spacing(1),\r\n                    width: 200,\r\n                }\r\n            }\r\n        }));\r\n\r\n        const BootstrapButton = withStyles({\r\n            root: {\r\n                margin : '10px',\r\n              boxShadow: 'none',\r\n              textTransform: 'none',\r\n              fontSize: 16,\r\n              padding: '6px 12px',\r\n              border: '1px solid',\r\n              lineHeight: 1.5,\r\n              backgroundColor: '#000000',\r\n              borderColor: '#000000',\r\n              fontFamily: [\r\n                '\"Segoe UI\"',\r\n                'Roboto',\r\n                '\"Helvetica Neue\"',\r\n                'Arial',\r\n                'sans-serif',\r\n                '\"Apple Color Emoji\"',\r\n                '\"Segoe UI Emoji\"',\r\n                '\"Segoe UI Symbol\"',\r\n              ].join(','),\r\n              '&:hover': {\r\n                backgroundColor: '#0069d9',\r\n                borderColor: '#0062cc',\r\n                boxShadow: 'none',\r\n              },\r\n              '&:active': {\r\n                boxShadow: 'none',\r\n                backgroundColor: '#0062cc',\r\n                borderColor: '#005cbf',\r\n              },\r\n              '&:focus': {\r\n                boxShadow: '0 0 0 0.2rem rgba(0,123,255,.5)',\r\n              },\r\n            },\r\n          })(Button);\r\n\r\n\r\n\r\n        return (\r\n            <div id='layout'>\r\n                <div id='left' className={leftOpen} >\r\n                    <div className='icon'\r\n                        onClick={this.toggleSidebar} >\r\n                        <img src={optionLogo} className=\"Option-logo\" alt=\"option\" />\r\n                    </div>\r\n                    <div className={`sidebar ${leftOpen}`} >\r\n                        <div className='header'>\r\n                            <h3 className='title'>\r\n                                Settings\r\n                    </h3>\r\n                        </div>\r\n                        <div className='content'>\r\n                            <form className={classes.root} noValidate autoComplete=\"off\">\r\n\r\n                                <TextField id=\"filled-allNum\" label=\"User Number\" variant=\"outlined\" value={this.state.allNum}\r\n                                    name='allNum' margin='normal' fullWidth={true} onChange={this.handleChange} />\r\n\r\n                                <TextField id=\"filled-mafiaNum\" label=\"Mafia Number\" variant=\"outlined\" value={this.state.mafiaNum}\r\n                                    name='mafiaNum' margin='normal' fullWidth={true} onChange={this.handleChange} />\r\n\r\n                                <TextField id=\"filled-docNum\" label=\"Doctor Number\" variant=\"outlined\" value={this.state.docNum}\r\n                                    name='docNum' margin='normal' fullWidth={true} onChange={this.handleChange} />\r\n\r\n                                <TextField id=\"filled-polNum\" label=\"Police Number\" variant=\"outlined\" value={this.state.polNum}\r\n                                    name='polNum' margin='normal' fullWidth={true} onChange={this.handleChange} />\r\n                                <p>\r\n                                    <Button variant=\"contained\" color=\"primary\"\r\n                                        fullWidth={true} onClick={this.SetGame}>Set</Button>\r\n                                </p>\r\n                                <Button variant=\"contained\" color=\"secondary\"\r\n                                    fullWidth={true} onClick={this.ResetGame}>Reset</Button>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id='main'>\r\n                    <div className=\"App\">\r\n                        <header className=\"App-header\">\r\n                            <img src=\"https://upload.wikimedia.org/wikipedia/commons/4/45/Logo_Mafia.svg\" className=\"App-logo\" alt=\"logo\" />\r\n                            <div>\r\n                                <BootstrapButton variant=\"contained\" color=\"primary\" onClick={this.readyToStart}>Ready</BootstrapButton>\r\n                            </div>\r\n                        </header>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport '../assets/App.css';\r\nimport Day from \"../containers/Day\"\r\nimport Night from \"../containers/Night\"\r\nimport Dead from \"../containers/Dead\"\r\nimport Start from \"../containers/Start\"\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Route exact path=\"/\" component={Start} />\r\n        <Route path=\"/day\" component={Day} />\r\n        <Route path=\"/night\" component={Night} />\r\n        <Route path=\"/dead\" component={Dead} />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.776881f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/audio.fc9c468c.mp3\";","module.exports = __webpack_public_path__ + \"static/media/death.2d405717.mp3\";","module.exports = __webpack_public_path__ + \"static/media/repairing-service.bd1c28c6.svg\";"],"sourceRoot":""}